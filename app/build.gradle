apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "mquinn.sign_language"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.annotation:annotation:1.0.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation project(':opencv343')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'

//    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    //noinspection GradleCompatible
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//    implementation 'com.google.code.gson:gson:2.8.5'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    implementation project(':opencv343')
}


// Library build phase
// Export this JAR for use in the offline trainer
// Puts exported JAR in \app\build\outputs\jar

//apply plugin: 'com.android.library'
//
//android {
//    compileSdkVersion 28
//    defaultConfig {
//        minSdkVersion 16
//        targetSdkVersion 26
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }
//}
//
//dependencies {
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//    implementation 'com.google.code.gson:gson:2.8.5'
//    implementation project(':opencv343')
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//}
//
//task(makeJar) << {
//    // Empty. We'll add dependencies for this task below
//}
//
//// Generate jar creation tasks for all build variants
//android.libraryVariants.all { variant ->
//    String taskName = "makeJar${variant.name.capitalize()}"
//
//    // Create a jar by extracting it from the assembled .aar
//    // This ensures that products distributed via .aar and .jar exactly the same bits
//    task (taskName, type: Copy) {
//        String archiveName = "${project.name}-${variant.name}"
//        String outputDir = "${buildDir.getPath()}/outputs"
//
//        dependsOn "assemble${variant.name.capitalize()}"
//        from(zipTree("${outputDir}/aar/${archiveName}.aar"))
//        into("${outputDir}/jar/")
//        include('classes.jar')
//        rename ('classes.jar', "${archiveName}-${variant.mergedFlavor.versionName}.jar")
//    }
//
//    makeJar.dependsOn tasks[taskName]
//}